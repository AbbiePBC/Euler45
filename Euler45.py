
# Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

# Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
# Pentagonal	Pn=n(3n−1)/2	1, 5, 12, 22, 35, ...
# Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
# It can be verified that T285 = P165 = H143 = 40755.

# Find the next triangle number that is also pentagonal and hexagonal.

def main():
    
    n = 286
    while True:
        triangle_number = find_next_triangle_number(n)
        if is_pentagonal(triangle_number) and is_hexagonal(triangle_number):
            print(int(triangle_number))
            return
        n += 1

def find_next_triangle_number(n: int) -> int:
    return n*(n+1)*0.5

def is_pentagonal(triangle_number: int) -> bool:
    # n(3n−1)/2 = t
    # 3n^2 - n - 2t = 0
    # don't need to solve for n, just need discriminant to be >=0 and square
    # D = b^2 - 4ac.

    D: int = 1 + 4*3*2*triangle_number
    print(D)
    if D < 0:
        return False
    return is_square(D)

def is_hexagonal(triangle_number: int) -> bool:
    # Hn=n(2n−1)	
    # 2n^2 - n - t = 0
    
    D: int = 1 + 4*2*triangle_number
    if D < 0:
        return False
    return is_square(D)

def is_square(D: int) -> bool:
    # this relies on rounding, so not ideal solution
    root = D**0.5
    print(root)
    if int(root)**2 == D:
        return True
    return False

if __name__ == '__main__':
    main()


